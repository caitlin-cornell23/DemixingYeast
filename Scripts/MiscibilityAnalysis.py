""" This script takes data from csv's generated by the program "MiscibilityTemp.py", fits the data
to a sigmoid, and calculates the 95% uncertainty. The script gives the Tmix value of the sample
and associated statistics (95% confidence and standard deviation) along with a plot. """

import os
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import scipy.optimize as optimize

## Set global matplotlib parameters
plt.rcParams["font.family"] = "serif"
plt.rcParams["font.size"] = 40
plt.rcParams["savefig.dpi"] = 600
plt.rcParams["axes.linewidth"] = 2.0
plt.rcParams["xtick.major.width"] = 1.5
plt.rcParams["ytick.major.width"] = 1.5

def Sigmoid(x, c, d, a):

	"""This function computes a sigmoid from percentage data and
	temperature data"""

	## a = asymptote 
	## c = Tmix value (inflection point of the curve)
	## d = rate of the sigmoid decay

	return a * (1 - 1 / (1 + np.exp(-(x - c) / d)))


if __name__ == "__main__":

	## Define the root directory
	root_dir = "C:\\Users\\caitl\\Documents\\YeastProject\\20190418_30c\\"

	## Make a pandas dataframe from the even-degree data
	even_df = pd.read_csv(root_dir +"Exp3\\24_MMStack_Pos0.ome_results.csv", header=0, index_col=0)

	## Make a pandas dataframe from the odd-degree data
	odd_df = pd.read_csv(root_dir + "Exp4\\24_MMStack_Pos0.ome_results.csv", header=0, index_col=0)

	## Combine the dataframes
	data = [even_df, odd_df]
	combined_df = pd.concat(data)
	combined_df = combined_df.sort_values("Temperatures")
	
	## Extract the values for temperature and percent PS from the dataframe
	temperature = combined_df["Temperatures"].tolist()
	percentPS = combined_df["PercentPS"].tolist()

	## fit a sigmoid to the data
	## Compute the optimization parameters and the covariance matrix
		#popt = optimizaiton parameters
		#pcov = covariance matrix (we will calculate confidence from this)
	popt, pcov = optimize.curve_fit(Sigmoid, temperature, percentPS, p0=(46,20,60)) # estimate parameters
	
	## Generate the fit
	Fit = Sigmoid(temperature, *popt)

	###### Sample the fit and determine confidence intervals ######

	## Get the coordinates for the fit curve
	coor_y = [np.min(Fit),np.max(Fit)]
	coor_x = [np.min(temperature), np.max(temperature)]

	## Predict the y-values of the original data from the fit parameters
	## popt[0] = c (tmix) and popt[1] = d
	pred_y = Sigmoid(temperature, *popt)

	## Calculate the y-error (residuals)
	y_err = percentPS - pred_y

	## Create a series of text x-values to sample
	pred_x = np.arange(np.min(temperature), np.max(temperature)+1,1)

	## Set up the variables to calculate confidence intervals
	mean_x = np.mean(temperature) # mean of temperatures
	n = len(temperature) # length of temperature array (number of samples)
	t = 2.093 # this value changes based on the confindence interval and the sample size (look up)
	std_err = np.sum(np.power(y_err,2)) # sum of the squares of the residuals

	## Calculate the confidence intervals from the new test values
	conf_int = t * np.sqrt((std_err/n-2))*(1.0/n + (np.power((pred_x - mean_x),2)/
					((np.sum(np.power(temperature,2)))-n*(np.power(mean_x,2)))))

	## Predict y-values based on test x-values
	pred_y = Sigmoid(pred_x, *popt)

	## Get upper and lower confidence limits based on the confidence intervals
	## and predicted y-values

	upper = Fit + abs(conf_int)
	lower = Fit - abs(conf_int)

	###### Plot the data ######

	## Set up the plot
	fig, axes = plt.subplots(1,1, figsize=(30,25))

	axes.grid(color="grey", alpha=0.3, linestyle="-")
	axes.plot(temperature, Fit, linestyle="-", color="#324851", linewidth=5)
	axes.plot(temperature, percentPS, marker="o", linestyle="None", markersize=20, color="#324851")
	axes.plot(temperature, upper, linestyle="-", linewidth=2, color="#34675C", alpha=0.7)
	axes.plot(temperature, lower, linestyle="-", linewidth=2, color="#34675C", alpha=0.7)
	axes.fill_between(temperature, lower, upper, color="#7DA3A1", alpha=0.5)
	axes.set_ylabel("Percent of Vacuoles with Domains")
	axes.set_xlabel("Temperature")
	axes.text(43,50, "Tmix = {}".format(int(popt[0]), fontsize=30))


	plt.tight_layout()
	plt.savefig("20190418_Exp3&4.pdf")
	plt.show()












